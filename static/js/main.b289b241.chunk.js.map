{"version":3,"sources":["components/timer/timer.jsx","components/form-input-number/form-input-number.jsx","components/view-progress/view-progress.jsx","components/countdown/countdown.jsx","components/app/app.jsx","serviceWorker.js","index.jsx"],"names":["Timer","props","handleStart","state","timerValue","timerCurrent","setState","timeStart","clearInterval","timerId","Date","now","setInterval","tick","reset","this","resultTimer","text","mm","Math","trunc","toFixed","ss","ms","className","onClick","type","React","Component","FormInputNumber","onChangeMin","onChangeSec","onChangeSlider","minute","second","disabled","sliderValue","min","max","step","onChange","value","tipFormatter","id","htmlFor","defaultProps","ViewProgress","percent","Countdown","seconds","newTime","totalTime","srcTotalTime","minuts","Number","isNaN","newSrcTotalTime","resetCountdown","intervalId","isActive","startCountdown","tickCountdown","playAudio","str","audio","Audio","play","currentTime","current","total","getMinute","getSecond","ceil","floor","App","TabPane","Tabs","defaultActiveKey","tab","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b289b241.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Button } from \"antd\";\r\nimport \"./timer.scss\";\r\n\r\nexport class Timer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      timerValue: 0,\r\n      timerCurrent: 0,\r\n      state: \"inactive\",\r\n    };\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.timerId);\r\n  }\r\n\r\n  handleStart = () => {\r\n    const { state, timerValue, timerCurrent } = this.state;\r\n\r\n    if (state === \"active\") {\r\n      this.setState({\r\n        state: \"inactive\",\r\n        timeStart: 0,\r\n        timerCurrent: 0,\r\n        timerValue: timerValue + timerCurrent,\r\n      });\r\n      clearInterval(this.timerId);\r\n    } else {\r\n      this.setState({\r\n        state: \"active\",\r\n        timeStart: Date.now(),\r\n      });\r\n      this.timerId = setInterval(() => {\r\n        this.tick();\r\n      }, 10);\r\n    }\r\n  };\r\n\r\n  reset = () => {\r\n    clearInterval(this.timerId);\r\n    this.setState({\r\n      state: \"inactive\",\r\n      timerValue: 0,\r\n      timerCurrent: 0,\r\n    });\r\n  };\r\n\r\n  tick() {\r\n    this.setState(({ timeStart }) => {\r\n      return { timerCurrent: Date.now() - timeStart };\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { state, timerCurrent, timerValue } = this.state;\r\n    const resultTimer = timerCurrent + timerValue;\r\n    const text = state === \"active\" ? \"Pause\" : \"Start\";\r\n    const mm = Math.trunc(resultTimer / 60000).toFixed(0);\r\n    const ss = ((resultTimer / 1000) % 60).toFixed(0);\r\n    const ms = (resultTimer % 1000).toFixed(0);\r\n\r\n    return (\r\n      <>\r\n        <div className=\"timer-view\">{`${mm}min - ${ss}sec - ${ms}ms`}</div>\r\n        <Button className=\"timer-btn\" onClick={this.handleStart} type=\"primary\">\r\n          {text}\r\n        </Button>\r\n        <Button onClick={this.reset} className=\"timer-btn\" type=\"primary\">\r\n          Reset\r\n        </Button>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","/* eslint-disable react/require-default-props */\r\nimport React from \"react\";\r\nimport { InputNumber, Slider} from \"antd\";\r\nimport \"./form-input-number.scss\";\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const FormInputNumber = (props) => {\r\n  const {\r\n    onChangeMin,\r\n    onChangeSec,\r\n    onChangeSlider,\r\n    minute,\r\n    second,\r\n    disabled,\r\n  } = props;\r\n  const sliderValue = minute * 60 + second;\r\n  return (\r\n    <>\r\n      <Slider\r\n        className=\"form-slider\"\r\n        min={0}\r\n        max={3600}\r\n        step={15}\r\n        onChange={onChangeSlider}\r\n        value={sliderValue}\r\n        tipFormatter={null}\r\n        disabled={disabled}\r\n      />\r\n\r\n      <InputNumber\r\n        className=\"form-minute\"\r\n        type=\"number\"\r\n        id=\"minute\"\r\n        min={0}\r\n        max={720}\r\n        value={minute}\r\n        onChange={onChangeMin}\r\n        disabled={disabled}\r\n      />\r\n      <label htmlFor=\"minute\"> minute(s)</label>\r\n      <InputNumber\r\n        className=\"form-second\"\r\n        type=\"number\"\r\n        id=\"second\"\r\n        min={0}\r\n        max={59}\r\n        value={second}\r\n        onChange={onChangeSec}\r\n        disabled={disabled}\r\n      />\r\n      <label htmlFor=\"second\"> second(s)</label>\r\n    </>\r\n  );\r\n};\r\n\r\nFormInputNumber.defaultProps = {\r\n  minute: 0,\r\n  second: 0,\r\n  disabled: false\r\n};\r\n\r\nFormInputNumber.propTypes = {\r\n  onChangeMin: PropTypes.func,\r\n  onChangeSec: PropTypes.func,\r\n  onChangeSlider: PropTypes.func,\r\n  disabled: PropTypes.bool,\r\n  minute: PropTypes.number,\r\n  second: PropTypes.number\r\n}\r\n","import React from \"react\";\r\nimport { Progress } from \"antd\";\r\nimport \"./view-progress.scss\"\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nexport const ViewProgress = (props) => {\r\n  const { minute, second, percent } = props;\r\n  \r\n  return (\r\n      <>\r\n      <h2 className=\"view-title\">{`${minute} minut - ${second} second`}</h2>\r\n      <Progress type=\"circle\" percent={percent} />\r\n    </>\r\n  );\r\n};\r\n\r\nViewProgress.defaultProps = {\r\n    minute: 0,\r\n    second: 0,\r\n    percent: 0,\r\n  };\r\n\r\nViewProgress.propTypes = {\r\n    minute: PropTypes.number,\r\n    second: PropTypes.number,\r\n    percent: PropTypes.number\r\n}\r\n","import React from \"react\";\r\nimport \"./countdown.scss\";\r\nimport { Button } from \"antd\";\r\nimport { FormInputNumber } from \"../form-input-number\";\r\nimport { ViewProgress } from \"../view-progress\";\r\n\r\nexport class Countdown extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      srcTotalTime: 0,\r\n      totalTime: 0,\r\n      isActive: false,\r\n    };\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.intervalId);\r\n  }\r\n\r\n  onChangeSlider = (seconds) => {\r\n    const newTime = seconds * 1000;\r\n    this.setState({\r\n      totalTime: newTime,\r\n      srcTotalTime: newTime,\r\n    });\r\n  };\r\n\r\n  onChangeMin = (minuts) => {\r\n    if (Number.isNaN(minuts) || minuts > 720) return;\r\n    const { srcTotalTime } = this.state;\r\n    const second = (srcTotalTime / 1000) % 60;\r\n    const newTime = (minuts * 60 + second) * 1000;\r\n    this.setState({\r\n      totalTime: newTime,\r\n      srcTotalTime: newTime,\r\n    });\r\n  };\r\n\r\n  onChangeSec = (second) => {\r\n    if (Number.isNaN(second) || second > 59) return;\r\n    const { srcTotalTime } = this.state;\r\n    const secondOld = (srcTotalTime / 1000) % 60;\r\n    const newSrcTotalTime = srcTotalTime + (second - secondOld) * 1000;\r\n    this.setState({\r\n      totalTime: newSrcTotalTime,\r\n      srcTotalTime: newSrcTotalTime,\r\n    });\r\n  };\r\n\r\n  resetCountdown = () => {\r\n    clearInterval(this.intervalId);\r\n    this.setState({\r\n      totalTime: 0,\r\n      srcTotalTime: 0,\r\n      isActive: false,\r\n    });\r\n  };\r\n\r\n  startCountdown = () => {\r\n    const { isActive, srcTotalTime, totalTime } = this.state;\r\n    if (isActive) {\r\n      clearInterval(this.intervalId);\r\n      this.setState({\r\n        isActive: false,\r\n      });\r\n    } else {\r\n      this.setState({\r\n        isActive: true,\r\n        totalTime: totalTime || srcTotalTime,\r\n      });\r\n      this.intervalId = setInterval(this.tickCountdown, 1000);\r\n    }\r\n  };\r\n\r\n  playAudio = (str = \"countdown.mp3\") => {\r\n    const audio = new Audio(str);\r\n    audio.play();\r\n  };\r\n\r\n  tickCountdown = () => {\r\n    this.setState(({ totalTime }) => {\r\n      const currentTime = totalTime - 1000;\r\n      if (currentTime <= 0) {\r\n        clearInterval(this.intervalId);\r\n        this.playAudio();\r\n        return {\r\n          totalTime: 0,\r\n          isActive: false,\r\n        };\r\n      }\r\n      return {\r\n        totalTime: currentTime,\r\n      };\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { totalTime, srcTotalTime, isActive } = this.state;\r\n\r\n    const getMinute = (total) => {\r\n      return Math.trunc(total / 60000);\r\n    };\r\n\r\n    const getSecond = (total) => {\r\n      return Math.ceil((total / 1000) % 60);\r\n    };\r\n    const getPercent = (current, total) => {\r\n      return Math.floor(((total - current) * 100) / total);\r\n    };\r\n\r\n    return (\r\n      <>\r\n        <FormInputNumber\r\n          onChangeMin={this.onChangeMin}\r\n          onChangeSec={this.onChangeSec}\r\n          onChangeSlider={this.onChangeSlider}\r\n          minute={getMinute(srcTotalTime)}\r\n          second={getSecond(srcTotalTime)}\r\n          disabled={isActive}\r\n        />\r\n        <ViewProgress\r\n          minute={getMinute(totalTime)}\r\n          second={getSecond(totalTime)}\r\n          percent={getPercent(totalTime, srcTotalTime)}\r\n        />\r\n        <Button\r\n          type=\"primary\"\r\n          className=\"countdown-btn\"\r\n          onClick={this.startCountdown}\r\n          disabled={!(srcTotalTime)}\r\n        >\r\n          {isActive ? \"Pause\" : \"Play\"}\r\n        </Button>\r\n        <Button\r\n          type=\"primary\"\r\n          className=\"countdown-btn\"\r\n          onClick={this.resetCountdown}\r\n        >\r\n          Reset\r\n        </Button>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { Tabs } from \"antd\";\r\nimport \"./app.scss\";\r\nimport \"antd/dist/antd.css\";\r\nimport { Timer } from \"../timer\";\r\nimport { Countdown } from \"../countdown\";\r\n\r\nexport const App = () => {\r\n  const { TabPane } = Tabs;\r\n\r\n  return (\r\n    <Tabs defaultActiveKey=\"2\">\r\n      <TabPane tab=\"Timer\" key=\"1\">\r\n        <Timer />\r\n      </TabPane>\r\n      <TabPane tab=\"Countdown\" key=\"2\">\r\n        <Countdown />\r\n      </TabPane>\r\n    </Tabs>\r\n  );\r\n};\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { App } from \"./components/app\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n// import \"./index.css\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}